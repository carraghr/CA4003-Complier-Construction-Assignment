/****************************************************
*
*	Section 1 - Options
*
*****************************************************/

options{ JAVA_UNICODE_ESCAPE = true; }
/****************************************************
*
*	Section 2 - User Code
*
*****************************************************/

PARSER_BEGIN(BasicLTokeniser)

public class BasicLTokeniser{

  	//Parser executions
	public static void main(String [] args){

		//Parser initialisationz
		BasicLTokeniser tokeniser;

		if(args.length == 0){
			System.out.println("Reading from standard input ...");
			tokeniser = new BasicLTokeniser(System.in);
		}
		else if(args.length == 1){
		  try{
			tokeniser = new BasicLTokeniser(new java.io.FileInputStream(args[0]));
			tokeniser.program();
		  }catch(java.io.FileNotFoundException e){
		    System.err.println("File " + args[0] + " not found");
		    return;
		  }catch(ParseException e){
		    e.printStackTrace();		  }
		}
		else{
		  System.out.println("BasicL Tokeniser: Usage is one of:");
		  System.out.println("java BasicLTokeniser < inputfile");
		  System.out.println("OR");
		  System.out.println("java BasicLTokeniser inputfile");
		  return;
		}
	}
}
PARSER_END(BasicLTokeniser)
/****************************************************
*
*	Section 3 - Token Definitions
*
*****************************************************/

TOKEN_MGR_DECLS : {
  static int commentNesting = 0;
}

SKIP : {  " " //Ignoring spaces/tabs/new lines
		| "\t"
		| "\n"
		| "\r"
		| "\f"
}
SKIP : { /* comments */
		"/*"{commentNesting++;}:IN_COMMENT
		|< "--" (~["\r", "\n"])* > //~["\n","\r"] matches any character except the new line characters}
<IN_COMMENT> SKIP : { "/*" { commentNesting++; }					| "*/" { commentNesting--;
		  		 			 if(commentNesting == 0)								SwitchTo(DEFAULT); //stops reading in a comment Allows for in line comments 			   			   }					|< ~[] > //takes any character}
TOKEN :{ < AND : "and" > /*Keywords*/  		| < BOOL : "bool" >
  		| < CONST : "const" >
  		| < DO : "do">
  		| < ELSE : "else" >
  		| < FALSE : "false">
  		| < IF : "if">
  		| < INT : "int">
  		| < MAIN : "main">
  		| < NOT :"not">
  		| < OR : "or">
  		| < RETURN : "return">
  		| < THEN : "then">
  		| < TRUE : "true">
  		| < VAR : "var">
  		| < VOID : "void">
  		| < WHILE : "while">
  		| < BEGIN : "begin">
  		| < END : "end">
  }

TOKEN : { < NUM : (< DIGIT>)+ > /* numbers and Identifiers */
		| < #DIGIT : ["0" - "9"] >
		| < ID : < LETTER > (["a"-"z","A"-"Z","0"-"9","_"])*>//letter first then letter|digit| underscore   		| < #LETTER : ["a" - "z","A" - "Z"] >
}

TOKEN : { <PLUS_SIGN :"+"> /*Operators and relations*/
		| < MINUS_SIGN :"-">
		| < MULT_SIGN : "*">
		| < DIV_SIGN : "/">
		| < EQUALS_SIGN : "=">
		| < NOT_EQUALS_SIGN :"!=">
		| < LESS_THEN : "<">
		| < MORE_THEN : ">">
		| < LESS_THEN_EQ : "<=">
		| < MORE_THEN_EQ : ">=">
		| < LBR : "(">
		| < RBR : ")">
		| < COMMA : ",">
		| < SEMI_COMMA : ";">
		| < COLON : ":">
		| < ASSIGN : ":=">
}

TOKEN : { < OTHER : ~[]> }/* Anything that is not recognised so far.*/

/****************************************************
*
*	Section 4 - The Grammar
*
*****************************************************/

void program() : {}
				 {
				   (decl())*
				   (function())*
				   main_prog()
				   {System.out.println("Program");}				 }

void decl() : {}
			  {
			    var_decl()
			  | const_decl()
			  {System.out.println("decl");}
			  }

void var_decl() : {}
				{
				  <VAR> ident_list() <COLON> type() (<COMMA> ident_list() <COLON> type())* <SEMI_COMMA>
				  {System.out.println("var decl");}
				}

void const_decl() :	{}
					{
					  <CONST> <ID> <COLON> type() <EQUALS_SIGN> expression() (<COMMA> <ID> <COLON> type() <EQUALS_SIGN> expression() )* <SEMI_COMMA>
					  {System.out.println("const decl");}
					}

void function() : {}
				  {
				    type() <ID> <LBR> param_list() <RBR>
				    <BEGIN>
				    (decl())*
				    (statement() <SEMI_COMMA> )*
				    <RETURN> (expression()|{}) <SEMI_COMMA>
				    <END>
				    {System.out.println("function");}
				  }

void param_list() :	{}
					{
					  (<ID><COLON> type() ( <COMMA> <ID> <COLON> type())* | {})
					  {System.out.println("param list");}					}

void type() : {}
			{
			  <INT> | <BOOL> | <VOID>
			  {System.out.println("type");}
			}

void main_prog() : {}
				   {
				     <MAIN>
				     <BEGIN>
				     (decl())*
				     (statement()<SEMI_COMMA>)*
				     <END>
				     {System.out.println(" main Program");}
				   }

void statement() : {}
						{
						  <ID> (<ASSIGN> expression()|<LBR> arg_list() <RBR>)
						| <BEGIN> (statement() <SEMI_COMMA> )* <END>
						| <IF> condition() <THEN> statement() <SEMI_COMMA> <ELSE> statement()
						| <WHILE> condition() <DO> statement()
						| {}
						{System.out.println("statement");}
						}
void functionCall() :{}
					 {
					   <ID> <LBR> arg_list() < RBR>
					   {System.out.println("function call");}
					 }

void expression() : {}
					{
					  LOOKAHEAD(2)

					  functionCall()
					| term() nextExpression()
					  {System.out.println("expression");}					}

void nextExpression() : {} //bind + and - 
						{
						  <PLUS_SIGN> expression()
						| <MINUS_SIGN> expression()
						|{}
						{System.out.println("next Expression");}
						}

void term() : {}
			  {
			    fragment() subExpression()
			  | <LBR> expression() <RBR> subExpression()
			    {System.out.println("term");}
			  }

void subExpression() : {}
					   {
					     <MULT_SIGN> term() 
						|<DIV_SIGN> term()
						|{}
						{System.out.println("subExpression");}
					   }

void fragment() : {}
				  {
				    <ID>
				  | <NUM>
				  | <TRUE>
				  | <FALSE>
				  | <PLUS_SIGN> ( fragment() | expression())
				  | <MINUS_SIGN>( fragment() | expression())
				  {System.out.println("fragment");}
				}
			  
void relationExpression() : {}
							{
							 expression() ( (<EQUALS_SIGN>|<NOT_EQUALS_SIGN>|<LESS_THEN>|<MORE_THEN>|<LESS_THEN_EQ>|<MORE_THEN_EQ>) expression() | {})
							 {System.out.println("relationExpression");}							}

void condition() : {}
				   {				     <NOT> condition()
				   | <LBR> relationExpression() <RBR> ( (<AND>|<OR>) condition() |{})
				   |  relationExpression() ( (<AND>|<OR>) condition() |{})				   }
				   				   
void ident_list() : {}
				 {
				   <ID> (<COMMA> <ID>)*
				   	 {System.out.println("ident_list");}
				 }

void arg_list() : {}
				{
				   (ident_list()| {})
				   	 {System.out.println("arg_list");}
				}
