/****************************************************
*
*	Section 1 - Options
*
*****************************************************/

options{ JAVA_UNICODE_ESCAPE = true; }
/****************************************************
*
*	Section 2 - User Code
*
*****************************************************/

PARSER_BEGIN(BasicLTokeniser)

public class BasicLTokeniser{

  	//Parser execution	public static void main(String [] args){
		//Parser initialisation
		BasicLTokeniser tokeniser;

		if(args.length == 0){			System.out.println("Reading from standard input ...");
			tokeniser = new BasicLTokeniser(System.in);
		}
		else if(args.length == 1){
		  try{			tokeniser = new BasicLTokeniser(new java.io.FileInputStream(args[0]));
		  }catch(java.io.FileNotFoundException e){
		    System.err.println("File " + args[0] + " not found");
		    return;		  }		}
		else{
		  System.out.println("BasicL Tokeniser: Usage is one of:");
		  System.out.println("java BasicLTokeniser < inputfile");
		  System.out.println("OR");
		  System.out.println("java BasicLTokeniser inputfile");
		  return;
		}

		for(Token t = getNextToken(); t.kind!=EOF; t = getNextToken()){
		  if(t.kind == NUM){
		    System.out.println("Number");
		    System.out.println("("+t.image+") ");		  }
		  else if(t.kind == ID){
		    System.out.println("Identifier");
		    System.out.println("("+t.image+") ");
		  }
	}
}

PARSER_END(BasicLTokeniser)
/****************************************************
*
*	Section 3 - Token Definitions
*
*****************************************************/
TOKEN_MGR_DECLS : {
  static int commentNesting = 0;
}

SKIP : {  " " //Ignoring spaces/tabs/new lines
		| "\t"
		| "\n"
		| "\r"
		| "\f"
}
SKIP : { /* comments */
		"/*"{commentNesting++;}:IN_COMMENT
		|< "--" (~["\r", "\n"])* > //~["\n","\r"] matches any character except the new line characters}
<IN_COMMENT> SKIP : { "/*" { commentNesting++; }					| "*/" { commentNesting--;
		  		 			 if(commentNesting == 0)								switchTo(DEFAULT); //stops reading in a comment Allows for in line comments 			   			   }					|< ~[] > //takes any character}
TOKEN :{ < AND : "and" > /*Keywords*/  		| < BOOL : "bool" >
  		| < CONST : "const" >
  		| < DO : "do">
  		| < ELSE : "else" >
  		| < FALSE : "false">
  		| < IF : "if">
  		| < INT : "int">
  		| < MAIN : "main">
  		| < NOT :"not">
  		| < OR : "or">
  		| < RETURN : "return">
  		| < THEN : "then">
  		| < TRUE : "true">
  		| < VAR : "var">
  		| < VOID : "void">
  		| < WHILE : "while">
  		| < BEGIN : "begin">
  		| < END : "end">
  }

TOKEN : { < NUM : (< DIGIT>)+ > /* numbers and Identifiers */
		| < #DIGIT : ["0" - "9"] >
		| < ID : (< LETTER > | < DIGIT>| ["_"])+>  		| < #LETTER : ["a" - "z","A" - "Z"] >
}

TOKEN : { <PLUS_SIGN :"+"> /*Operators and relations*/
		| < MINUS_SIGN :"-">
		| < MULT_SIGN : "*">
		| < DIV_SIGN : "/">
		| < EQUALS_SIGN : "=">
		| < NOT_EQUALS_SIGN :"!=">
		| < LESS_THEN : "<">
		| < MORE_THEN : ">">
		| 